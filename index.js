// –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Å–ª–æ–≤–æ "—Ä—É–±–∞–π" –≤ —á–∞—Ç–µ, –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç "–ø—Ä–∏–≤–µ—Ç"
const {Telegraf} = require("telegraf");
const axios = require("axios");
const bot = new Telegraf("5349322670:AAGgL_PuGYb8T6CHxy_ZqY4BlMOnn8WaC64");
// 5349322670:AAGgL_PuGYb8T6CHxy_ZqY4BlMOnn8WaC64
//5609369539:AAFVT7jURIg_gpFTAQA5kZ8rZ6qlSz8aGbk - —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
// 315793010 - id –º–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞

const API_KEY = "a1a5763c6ce3ed3ae0df7930f0d187b2";

bot.start((ctx) => ctx.reply("–ü—Ä–∏–≤–µ—Ç!"));
bot.hears("/random", (ctx) =>
{
	let randomId = Math.floor(Math.random() * 300);
	ctx.reply(`https://picsum.photos/id/${randomId}/400/600/`);
});
bot.command("weather", (ctx) =>
{
	const location = "Vladikavkaz";
	getWeather(location, ctx);
});

bot.on("sticker", (ctx) =>
{
	if (ctx.message.sticker.emoji === "üëç")
	{
		ctx.reply("üëå");
	}
});
const strigoi = ["strigoi", "—Å—Ç—Ä–∏–≥–æ–π", "—Å—Ç—Ä–∏–≥", "strig", "—Å—Ç—Ä–∏–≥–æ–π", "s—Å—Ç—Ä–∏–≥–æ–π", "—Åt—Ä–∏–≥–æ–π", "st—Ä–∏–≥–æ–π", "cTrigoi", "c—Ç—Ä–∏–≥–æ–π", "—Å—Çr–∏–≥–æ–π", "—Å—Ç—Ä–∏–≥o–π", "—Å—Ç—ÄN–≥–æ–π", "—Å—Ç—Ä–∏r–æ–π"];
const rubai = ['—Ä—É–±–∞–π', '—Ä—É–±–∞–π.', '—Ä—É–±–∞–π,', "—Ä—É–±—Å", "—Ä—É–±–µ–Ω—Å", "rubai", "rubs", "rubens", "–†—É–±–∞–π", "–†—É–±–∞–π.", "–†—É–±–∞–π,", "–†—É–±—Å", "–†—É–±–µ–Ω—Å", "Rubai", "Rubs", "Rubens", "—Ä—É–±—á–∏–∫"];
function checkRubai(ctx)
{
	if (rubai.includes(ctx.message.text))
	{
		ctx.telegram.sendAudio(ctx.message.chat.id, {source: "strigoi.mp3"}, {reply_to_message_id: ctx.message.message_id});
	}
}
bot.on("message", (ctx) =>
{
	sendYou(ctx);
	checkRubai(ctx);
	const message = ctx.update.message;
	// check if the message text contains "strigoi"
	if (message.text && strigoi.some((word) => message.text.toLowerCase().includes(word)))
	{
		// send a photo to the user
		ctx.replyWithPhoto({source: "strigoi.jpg"}, {reply_to_message_id: ctx.message.message_id});
	}
});


// function to send the New Year's greeting
function sendMessage()
{
	bot.telegram.sendMessage(-1001695052259, "–° –Ω–æ–≤—ã–º –≥–æ–¥–æ–º Pediki, –ª—é–±–ª—é –≤–∞—Å –∏ –æ–±–Ω–∏–º–∞—é –¥–æ —Ö—Ä—É—Å—Ç–∞! üéâüéäüéà");
}

// schedule the message to be sent at 00:01 on 1.1.23
const targetDate = new Date("01/01/23 00:01:00");
const timeUntilTargetDate = targetDate - Date.now();
setTimeout(sendMessage, timeUntilTargetDate);

async function getWeather(location, ctx)
{
	const url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${API_KEY}`;
	try
	{
		const response = await axios.get(url);
		const data = response.data;
		// get the temperature and forecast
		let temperature = data.main.temp;
		temperature = Math.round(temperature - 273.15);
		const forecast = data.weather[0].description;
		// send the forecast to the user
		ctx.reply(`üå§Ô∏è *The weather in ${location}*:
						*Forecast:* ${forecast}
						*Temperature:* ${temperature}¬∞C`);
	}
	catch (error)
	{
		console.error(error);
	}
}

async function sendYou(ctx)
{
	if (arrXu.includes(ctx.message.text))
	{
		await ctx.reply("—Å–∞–º –∏–¥–∏ –Ω–∞ —Ö—É–π", {reply_to_message_id: ctx.message.message_id});
	}
}

let arrXu = ["–∏–¥–∏ –Ω–∞ —Ö—É–π", "–∏–¥–∏ –Ω–∞—Ö—É–π", "–ø–æ—à–µ–ª –Ω–∞ —Ö—É–π", "–ø–æ—à–µ–ª –Ω–∞—Ö—É–π", "–Ω–∞—Ö—É–π –∏–¥–∏", "–Ω–∞ —Ö—É–π –∏–¥–∏", "–ø–æ—à—ë–ª –Ω–∞—Ö—É–π", "–ø–æ—à—ë–ª –Ω–∞ —Ö—É–π", "–Ω–∞—Ö—É–π –ø–æ—à—ë–ª", "–Ω–∞ —Ö—É–π –ø–æ—à—ë–ª"];


bot.launch();







